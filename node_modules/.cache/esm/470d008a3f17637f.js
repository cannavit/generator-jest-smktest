let chalk,fs,ncp,path,promisify,Listr,configSmktest;_3f1‍.x([["createProject",()=>createProject],["solveTasks",()=>solveTasks]]);_3f1‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_3f1‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_3f1‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_3f1‍.w("path",[["default",["path"],function(v){path=v}]]);_3f1‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_3f1‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_3f1‍.w("./services/createConfigFile",[["configSmktest",["configSmktest"],function(v){configSmktest=v}]]);







const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
  return copy(options.templateDirectory, options.targetDirectory, {
    clobber: false,
  });
}

       async function createProject(options) {
  options = {
    ...options,
    targetDirectory: options.targetDirector || process.cwd,
  };

  const currentFileUrl = _3f1‍._.meta.url;
  const templateDir = path.resolve(
    new URL(currentFileUrl).pathname,
    '../../templates',
    options.template.toLowerCase()
  );
  options.templateDirectory = templateDir;

  try {
    await access(templateDir, fs.constants.R_OK);
  } catch (err) {
    _3f1‍.g.console.log('%s Invalid template name', chalk.red.bold('ERROR'));
  }

  await copyTemplateFiles(options);

  _3f1‍.g.console.log(' %s Project ready', chalk.green.bold('DONE'));

  return true;
}

       async function solveTasks(options) {
  const task = new Listr([
    {
      title: 'Create ConfigFile',
      task: () => configSmktest(options),
    },
  ]);

  await task.run();
}
